package org.stranger2015.opencv.fic;

import org.jetbrains.annotations.NotNull;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.Rect;
import org.opencv.core.Size;
import org.stranger2015.opencv.fic.core.EDirection;
import org.stranger2015.opencv.fic.core.IImage;
import org.stranger2015.opencv.fic.core.TreeNodeBase.TreeNode.LeafNode;
import org.stranger2015.opencv.fic.core.ValueError;
import org.stranger2015.opencv.fic.core.codec.IAddress;
import org.stranger2015.opencv.fic.core.codec.Pixel;
import org.stranger2015.opencv.fic.transform.ImageTransform;
import org.stranger2015.opencv.fic.utils.GrayScaleImage;
import org.stranger2015.opencv.utils.BitBuffer;

import java.util.List;

/**
 * 8 X 8
 */
@Deprecated
public
class DomainBlock<N extends DomainBlock <N, A, M, G>, A extends IAddress <A>, M extends IImage <A>,
        G extends BitBuffer>
        extends LeafNode <N, A, M, G>
        implements IImage <A> {

    public final static int W = 8;
    public final static int H = 8;
    private int originalImageSideSize;

    /**
     * @param parent
     * @param image
     * @param rect
     */
    public
    DomainBlock ( TreeNode <N, A, M, G> parent, M image, Rect rect ) {
        super(parent, image, rect);
    }

    /**
     * @param address
     */
    public
    DomainBlock ( IAddress <A> address ) {
        super(address);
    }

    /**
     * @param point
     * @param layerIndex
     * @param clusterIndex
     * @param address
     * @return
     * @throws ValueError
     */
    @Override
    public
    TreeNode <N, A, M, G> createChild ( GrayScaleImage <A> point,
                                        int layerIndex,
                                        int clusterIndex,
                                        IAddress <A> address )
            throws ValueError {

        return new DomainBlock <>(address);
    }

    /**
     * @param layerIndex
     * @param imageBlock
     * @param address
     * @return
     * @throws ValueError
     */
//    @Override
    public//todo fixme
    TreeNode <N, A, M, G> createChild ( int layerIndex, int imageBlock, IAddress <A> address ) throws ValueError {
        return new DomainBlock <>(null, null);//fixme
    }

    /**
     * @param parent
     * @param boundingBox
     * @throws ValueError
     */
    public
    DomainBlock ( TreeNode <N, A, M, G> parent, Rect boundingBox ) throws ValueError {
        super(parent, null, boundingBox);
    }

//    /**
//     *
//     *
//     * @return
//     */
//    @Override
//    public
//    int getX () {
//        return imageBlock.getX();
//    }

//    /**
//     *
//     *
//     * @return
//     */
//    @Override
//    public
//    int getY () {
//        return imageBlock.getY();
//    }

    /**
     * @return
     */
    @Override
    public
    int getWidth () {
        return imageBlock.getWidth();
    }

    /**
     * @return
     */
    @Override
    public
    int getHeight () {
        return imageBlock.getHeight();
    }

    /**
     * @return
     */
    @Override
    public
    Size getSize () {
        return new Size();
    }//fixme

    /**
     * @param contractivity
     */
    @Override
    public
    M contract ( int contractivity ) {
        return null;
    }


    /**
     * @param rowStart
     * @param rowEnd
     * @param colStart
     * @param colEnd
     * @return
     */
    @Override
    public
    Mat submat ( int rowStart, int rowEnd, int colStart, int colEnd ) {
        return new Mat().submat(rowStart, rowEnd, colStart, colEnd);//fixme
    }

    /**
     * @param originalImageSideSize
     */
    @Override
    public
    void setOriginalImageSideSize ( int originalImageSideSize ) {
this.originalImageSideSize=    originalImageSideSize;
        }

    /**
     * @return
     */
    @Override
    public
    int getOriginalImageSideSize () {
        return originalImageSideSize;
    }

    /**
     * @param address
     * @param pixel
     */
    @Override
    public
    int putPixel ( IAddress <A> address, int[] pixel ) {

    }

    /**
     * Sets a sample in the specified band for the pixel located at (x,y)
     * in the DataBuffer using an int for input.
     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are
     * not in bounds.
     *
     * @param address
     * @param b       The band to set.
     * @param s       The input sample as an int.
     * @throws NullPointerException           if data is null.
     * @throws ArrayIndexOutOfBoundsException if the coordinates or
     *                                        the band index are not in bounds.
     */
    @Override
    public
    void setSample ( IAddress <A> address, int b, int s ) {

    }

    /**
     * Returns the sample in a specified band for the pixel located
     * at (x,y) as an int.
     * ArrayIndexOutOfBoundsException may be thrown if the coordinates are
     * not in bounds.
     *
     * @param address
     * @param b       The band to return.
     * @return the sample in a specified band for the specified pixel.
     * @throws NullPointerException           if data is null.
     * @throws ArrayIndexOutOfBoundsException if the coordinates or
     *                                        the band index are not in bounds.
     */
    @Override
    public
    int getSample ( IAddress <A> address, int b ) {
        return 0;
    }

    @Override
    public
    int get ( int x, int y, int[] ia ) {
        return 0;
    }

    @Override
    public
    void putPixel ( int destX, int destY, int pixel ) {

    }

    @Override
    public
    void putPixel ( Pixel[] pixels, double v, double v1, double v2, double v3 ) {

    }

    @Override
    public final
    int cols () {
        return 1;
    }

    @Override
    public
    int rows () {
        return getWidth() * getHeight();
    }

    /**
     * @param x
     * @param y
     */
    @Override
    public
    void setAddress ( int x, int y ) {

    }

    /**
     *
     */
    @Override
    public
    List <GrayScaleImage <A>> split () {
        return null;
    }

    /**
     * @param layers
     * @param inputImage
     * @return
     */
    @Override
    public
    IImage <A> merge ( List <GrayScaleImage <A>> layers, IImage <A> inputImage ) {
        return null;
    }

    @Override
    public
    void release () {

    }

    @Override
    public
    String dump () {
        return "?";
    }

    /**
     * @param parent
     * @param quadrant
     * @param boundingBox
     * @return
     */
//    @Override
    public
    LeafNode <N, A, M, G> createNode ( TreeNode <N, A, M, G> parent, EDirection quadrant, Rect boundingBox )
            throws ValueError {
        throw new IllegalStateException();
    }

    /**
     * Compares this object with the specified object for order.  Returns a
     * negative integer, zero, or a positive integer as this object is less
     * than, equal to, or greater than the specified object.
     *
     * <p>The implementor must ensure
     * {@code sgn(x.compareTo(y)) == -sgn(y.compareTo(x))}
     * for all {@code x} and {@code y}.  (This
     * implies that {@code x.compareTo(y)} must throw an exception iff
     * {@code y.compareTo(x)} throws an exception.)
     *
     * <p>The implementor must also ensure that the relation is transitive:
     * {@code (x.compareTo(y) > 0 && y.compareTo(z) > 0)} implies
     * {@code x.compareTo(z) > 0}.
     *
     * <p>Finally, the implementor must ensure that {@code x.compareTo(y)==0}
     * implies that {@code sgn(x.compareTo(z)) == sgn(y.compareTo(z))}, for
     * all {@code z}.
     *
     * <p>It is strongly recommended, but <i>not</i> strictly required that
     * {@code (x.compareTo(y)==0) == (x.equals(y))}.  Generally speaking, any
     * class that implements the {@code Comparable} interface and violates
     * this condition should clearly indicate this fact.  The recommended
     * language is "Note: this class has a natural ordering that is
     * inconsistent with equals."
     *
     * <p>In the foregoing description, the notation
     * {@code sgn(}<i>expression</i>{@code )} designates the mathematical
     * <i>signum</i> function, which is defined to return one of {@code -1},
     * {@code 0}, or {@code 1} according to whether the value of
     * <i>expression</i> is negative, zero, or positive, respectively.
     *
     * @param o the object to be compared.
     * @return a negative integer, zero, or a positive integer as this object
     * is less than, equal to, or greater than the specified object.
     * @throws NullPointerException if the specified object is null
     * @throws ClassCastException   if the specified object's type prevents it
     *                              from being compared to this object.
     */
    @Override
    public                              //todo
    int compareTo ( @NotNull N o ) {
        return super.compareTo(o);
    }

    /**
     * @param parent
     * @param boundingBox
     * @return
     */
    @Override
    public
    TreeNode <N, A, M, G> createNode ( TreeNode <N, A, M, G> parent, Rect boundingBox ) throws ValueError {
        return null;
    }

    /**
     * @param parent
     * @param image
     * @param boundingBox
     * @return
     * @throws ValueError
     */
    @Override
    public
    TreeNode <N, A, M, G> createNode ( TreeNode <N, A, M, G> parent, M image, Rect boundingBox ) throws ValueError {
        return null;
    }

    /**
     * @return
     */
    @Override
    public
    int getX () {
        return 0;
    }

    /**
     * @return
     */
    @Override
    public
    int getY () {
        return 0;
    }

    /**
     * @return
     */
    @Override
    public
    MatOfInt getMat () {
        return null;
    }

    /**
     * @param x
     * @param y
     * @param width
     * @param height
     * @return
     */
    @Override
    public
    <M extends IImage <A>> M getSubImage ( int x, int y, int width, int height ) {
        return null;
    }

    /**
     * @param i
     * @param i1
     * @param width
     * @param height
     * @param img1pixels
     * @param i2
     * @param i3
     */
    @Override
    public
    void getRGB ( int i, int i1, int width, int height, int[] img1pixels, int i2, int i3 ) {

    }

    /**
     * @return
     */
    @Override
    public
    List <ImageTransform <?, A, ?>> getTransforms () throws ValueError {
        return null;
    }

    /**
     * @param imageTransforms
     */
    @Override
    public
    void setTransforms ( List <ImageTransform <?, A, ?>> imageTransforms ) throws ValueError {

    }

    /**
     * @return
     */
    @Override
    public
    int[] getPixels () {
        return new int[0];
    }

    /**
     * @return
     */
    @Override
    public
    boolean isGrayScale () {
        return false;
    }

    /**
     * @return
     */
    @Override
    public
    List <GrayScaleImage <A>> getComponents () {
        return null;
    }

    @Override
    public
    int get ( IAddress <A> address, int[] data ) {
        return 0;
    }

    /**
     * @return
     */
    @Override
    public
    M getImage () {
        return null;
    }

    /**
     * @return
     */
    @Override
    public
    Rect getBoundingBox () {
        return null;
    }
}
