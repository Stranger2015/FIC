package org.stranger2015.opencv.fic.utils;

import org.jetbrains.annotations.Contract;
import org.stranger2015.opencv.fic.core.ValueError;
import org.stranger2015.opencv.fic.core.codec.SipAddress;

/**
 *
 */
public
class DivisionOp<A extends SipAddress <A>> implements IPartible <A> {

    protected A divident;
    protected A divisor;
    private int remainder;


    /**
     * @param divident
     * @param divisor
     */
    @Contract(pure = true)
    public
    DivisionOp ( A divident, A divisor ) throws DivisionByZeroException {
        this.divident = divident;
        if (divisor.getNumber() == 0) {//todo check!!
            throw new DivisionByZeroException("");
        }
        this.divisor = divisor;
    }

    public
    DivisionOp ( Point p, int ai ) {

    }

    /**
     * @return
     */
    public
    A getDivident () {
        return divident;
    }

    /**
     * @return
     */
    public
    A getDivisor () {
        return divisor;
    }

    /**
     * @return
     */
    public
    int getRemainder () {
        return remainder;
    }

    /**
     * @param remainder
     */
    public
    void setRemainder ( int remainder ) {
        this.remainder = remainder;
    }

    /**
     * @return
     */
    public
    A divide () throws ValueError {
        A divident = getDivident();
        A divisor = getDivisor();
        setRemainder(divident.getNumber() % divisor.getNumber());

        return (A) new SipAddress<A>( divident.getNumber() / divisor.getNumber());
    }

    /**
     * @return
     */
    public
    int remainder () {
        setRemainder(divident.getNumber() % divisor.getNumber());

        return remainder;
    }

    /**
     * @param <A>
     */
    public static class PointDivisionOp<A extends SipAddress<A>> extends DivisionOp<A>{

        /**
         * @param p
         * @param ai
         */
        public
        PointDivisionOp ( Point p, int ai ) {
            super(p, ai);
        }

        /**
         * @return
         */
        @Override
        public
        A divide () throws ValueError {
            divident.divide();
            return (A) new SipAddress<A>(divident);
        }
    }

}
